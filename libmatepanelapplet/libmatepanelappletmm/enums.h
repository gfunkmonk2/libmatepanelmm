// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _LIBPANELAPPLETMM_ENUMS_H
#define _LIBPANELAPPLETMM_ENUMS_H


#include <glibmm.h>

/* $Id: enums.hg,v 1.5 2003/12/07 20:42:58 mxpxpod Exp $ */
// -*- C++ -*- // this is for the .hg, I realize gensig puts one in

/* Copyright 2003 libmatepanelappletmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


namespace Mate
{

namespace Panel
{


/** @addtogroup libmatepanelappletmmEnums Enums and Flags */

/**
 * @ingroup libmatepanelappletmmEnums
 */
enum AppletBackgroundType
{
  NO_BACKGROUND,
  COLOR_BACKGROUND,
  PIXMAP_BACKGROUND
};


/**
 * @ingroup libmatepanelappletmmEnums
 * @par Bitwise operators:
 * <tt>%AppletFlags operator|(AppletFlags, AppletFlags)</tt><br>
 * <tt>%AppletFlags operator&(AppletFlags, AppletFlags)</tt><br>
 * <tt>%AppletFlags operator^(AppletFlags, AppletFlags)</tt><br>
 * <tt>%AppletFlags operator~(AppletFlags)</tt><br>
 * <tt>%AppletFlags& operator|=(AppletFlags&, AppletFlags)</tt><br>
 * <tt>%AppletFlags& operator&=(AppletFlags&, AppletFlags)</tt><br>
 * <tt>%AppletFlags& operator^=(AppletFlags&, AppletFlags)</tt><br>
 */
enum AppletFlags
{
  APPLET_FLAGS_NONE = 0,
  APPLET_EXPAND_MAJOR = 1 << 0,
  APPLET_EXPAND_MINOR = 1 << 1,
  APPLET_HAS_HANDLE = 1 << 2
};

/** @ingroup libmatepanelappletmmEnums */
inline AppletFlags operator|(AppletFlags lhs, AppletFlags rhs)
  { return static_cast<AppletFlags>(static_cast<unsigned>(lhs) | static_cast<unsigned>(rhs)); }

/** @ingroup libmatepanelappletmmEnums */
inline AppletFlags operator&(AppletFlags lhs, AppletFlags rhs)
  { return static_cast<AppletFlags>(static_cast<unsigned>(lhs) & static_cast<unsigned>(rhs)); }

/** @ingroup libmatepanelappletmmEnums */
inline AppletFlags operator^(AppletFlags lhs, AppletFlags rhs)
  { return static_cast<AppletFlags>(static_cast<unsigned>(lhs) ^ static_cast<unsigned>(rhs)); }

/** @ingroup libmatepanelappletmmEnums */
inline AppletFlags operator~(AppletFlags flags)
  { return static_cast<AppletFlags>(~static_cast<unsigned>(flags)); }

/** @ingroup libmatepanelappletmmEnums */
inline AppletFlags& operator|=(AppletFlags& lhs, AppletFlags rhs)
  { return (lhs = static_cast<AppletFlags>(static_cast<unsigned>(lhs) | static_cast<unsigned>(rhs))); }

/** @ingroup libmatepanelappletmmEnums */
inline AppletFlags& operator&=(AppletFlags& lhs, AppletFlags rhs)
  { return (lhs = static_cast<AppletFlags>(static_cast<unsigned>(lhs) & static_cast<unsigned>(rhs))); }

/** @ingroup libmatepanelappletmmEnums */
inline AppletFlags& operator^=(AppletFlags& lhs, AppletFlags rhs)
  { return (lhs = static_cast<AppletFlags>(static_cast<unsigned>(lhs) ^ static_cast<unsigned>(rhs))); }


enum AppletOrient
{
  APPLET_ORIENT_UP,
  APPLET_ORIENT_DOWN,
  APPLET_ORIENT_LEFT,
  APPLET_ORIENT_RIGHT
};

} // namespace Panel
} // namespace Mate


#endif /* _LIBPANELAPPLETMM_ENUMS_H */
